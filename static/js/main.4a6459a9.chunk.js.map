{"version":3,"sources":["SortingAlgorithm/MergeSort.js","SortingAlgorithm/QuickSort.js","SortingAlgorithm/BubbleSort.js","SortingAlgorithm/SelectionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","QuickSortHelper","index","pivot","swap","partition","leftIndex","rightIndex","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","array1","height1","height2","array2","getBubbleSortAnimations","array3","minElement","minIndex","getSelectionSortAnimations","className","map","value","idx","key","onClick","mergeSort","quickSort","bubbleSort","selectionSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a6459a9.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  QuickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction QuickSortHelper(mainArray, startIdx, endIdx, animations) {\r\n  if (startIdx < endIdx) {\r\n    let index = partition(mainArray, startIdx, endIdx, animations);\r\n    QuickSortHelper(mainArray, startIdx, index - 1, animations);\r\n    QuickSortHelper(mainArray, index + 1, endIdx, animations);\r\n  }\r\n}\r\n\r\nfunction partition(mainArray, startIdx, endIdx, animations) {\r\n  let pivot = mainArray[endIdx];\r\n  let i = startIdx - 1;\r\n  for (let j = startIdx; j < endIdx; j++) {\r\n    animations.push([j, endIdx]); // to change the color\r\n    animations.push([j, endIdx]); // to revert the color\r\n    if (mainArray[j] < pivot) {\r\n      i++;\r\n      mainArray = swap(mainArray, i, j);\r\n      animations.push([i, j]);\r\n      animations.push([-1, -1]);\r\n    } else {\r\n      animations.push([-1, -1]); // 0 indicates that we don't have to swap these values\r\n      animations.push([-1, -1]);\r\n    }\r\n  }\r\n  mainArray = swap(mainArray, i + 1, endIdx);\r\n  animations[animations.length - 1] = [i + 1, endIdx]; // positioning of pivot to its correct position\r\n  return i + 1;\r\n}\r\n\r\nfunction swap(mainArray, leftIndex, rightIndex) {\r\n  [mainArray[leftIndex], mainArray[rightIndex]] = [\r\n    mainArray[rightIndex],\r\n    mainArray[leftIndex],\r\n  ];\r\n  return mainArray;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (array[i] > array[j]) {\r\n        array = swap(array, i, j);\r\n        animations.push([i, j]);\r\n      } else {\r\n        animations.push([-1, -1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nfunction swap(mainArray, leftIndex, rightIndex) {\r\n  [mainArray[leftIndex], mainArray[rightIndex]] = [\r\n    mainArray[rightIndex],\r\n    mainArray[leftIndex],\r\n  ];\r\n  return mainArray;\r\n}\r\n","export function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    let minElement = array[i];\r\n    let minIndex = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (array[j] < minElement) {\r\n        minElement = array[j];\r\n        minIndex = j;\r\n      }\r\n      animations.push([i, i]);\r\n    }\r\n    array = swap(array, i, minIndex);\r\n    animations.push([i, minIndex]);\r\n    animations.push([i, minIndex]);\r\n    animations.push([i, minIndex]);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nfunction swap(mainArray, leftIndex, rightIndex) {\r\n  [mainArray[leftIndex], mainArray[rightIndex]] = [\r\n    mainArray[rightIndex],\r\n    mainArray[leftIndex],\r\n  ];\r\n  return mainArray;\r\n}\r\n","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithm/MergeSort.js\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithm/QuickSort.js\";\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithm/BubbleSort.js\";\r\nimport { getSelectionSortAnimations } from \"../SortingAlgorithm/SelectionSort.js\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst ANIMATION_SPEED_MS = 2;\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 120;\r\n\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const array1 = this.state.array;\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else if (animations[i][0] !== -1) {\r\n        setTimeout(() => {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barTwoIdx].style;\r\n          const barTwoStyle = arrayBars[barOneIdx].style;\r\n          let height1 = array1[barOneIdx];\r\n          let height2 = array1[barTwoIdx];\r\n\r\n          barOneStyle.height = `${height2}px`;\r\n          barTwoStyle.height = `${height1}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const array2 = this.state.array;\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 === 0 || i % 3 === 1;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else if (animations[i][0] !== -1) {\r\n        setTimeout(() => {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barTwoIdx].style;\r\n          const barTwoStyle = arrayBars[barOneIdx].style;\r\n          let height1 = array2[barOneIdx];\r\n          let height2 = array2[barTwoIdx];\r\n\r\n          barOneStyle.height = `${height2}px`;\r\n          barTwoStyle.height = `${height1}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n    const array3 = this.state.array;\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 === 0 || i % 3 === 1;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barTwoIdx].style;\r\n          const barTwoStyle = arrayBars[barOneIdx].style;\r\n          let height1 = array3[barOneIdx];\r\n          let height2 = array3[barTwoIdx];\r\n\r\n          barOneStyle.height = `${height2}px`;\r\n          barTwoStyle.height = `${height1}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n        <button className=\"myButton\" onClick={() => this.resetArray()}>\r\n          Generate New Array\r\n        </button>\r\n        <button className=\"myButton\" onClick={() => this.mergeSort()}>\r\n          Merge Sort\r\n        </button>\r\n        <button className=\"myButton\" onClick={() => this.quickSort()}>\r\n          Quick Sort\r\n        </button>\r\n        <button className=\"myButton\" onClick={() => this.bubbleSort()}>\r\n          Bubble Sort\r\n        </button>\r\n        <button className=\"myButton\" onClick={() => this.selectionSort()}>\r\n          Selection Sort\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}